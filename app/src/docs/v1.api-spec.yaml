---
openapi: 3.0.3
info:
  version: 1.0.0
  title: Common Object Management Service (COMS)
  description: A microservice for managing access control to S3 Objects
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca

servers:
  - url: /api/v1
    description: This Server

security:
  - BasicAuth: []
  - BearerAuth: []
    OpenID: []

tags:
  - name: Object
    description: >-
      Operations directly influencing an S3 Object. Certain operations not
      available without a database.
    externalDocs:
      url: https://github.com/bcgov/common-object-management-service/wiki
  - name: Permission
    description: >-
      Operations for managing User Access Control to S3 Objects. Not available
      without a database.
    externalDocs:
      url: https://github.com/bcgov/common-object-management-service/wiki
  - name: User
    description: >-
      Operations to list valid queryable users and identity providers. Not
      available without a database.
    externalDocs:
      url: https://github.com/bcgov/common-object-management-service/wiki

paths:
  /object:
    post:
      summary: Creates new objects
      description: >-
        Create object(s) in the configured object storage. If COMS is running
        in either 'OIDC' or 'Full' mode, any objects created with OIDC user
        authentication will have all object permissions assigned to them by
        default.
      operationId: createObjects
      tags:
        - Object
      requestBody:
        description: Form-data containing files
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: foobar
              properties:
                anyKey:
                  type: string
                  description: >-
                    This endpoint can accept an arbitrary number of form-data keys.
                    There must be at least one key present, and every key must be
                    unique. All keys shall contain a binary representation of the
                    file to upload. In the response, each successfully uploaded
                    file shall contain a 'fieldName' property corresponding to
                    your custom defined keys.
                  format: binary
      responses:
        "201":
          description: Returns an array of created object data
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      required:
                        - fieldName
                      properties:
                        fieldName:
                          type: string
                          description: >-
                            A unique form field chosen for the key for each file
                            in the multi-part form-data post
                          example: "file1"
                    - $ref: "#/components/schemas/DB-Object"
                    - $ref: "#/components/schemas/S3-Object"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"

    get:
      summary: Search for objects
      description: >-
        Returns a list of objects. If the request is BasicAuth authenticated,
        all search and filtered results will appear. However, If the request
        is BearerAuth authenticated, only objects the user has at least one
        permission associated with them will appear in addition to their
        filtering parameters.
      operationId: searchObjects
      tags:
        - Object
      parameters:
        - $ref: "#/components/parameters/QueryObjectId"
        - $ref: "#/components/parameters/QueryOriginalName"
        - $ref: "#/components/parameters/QueryPath"
        - $ref: "#/components/parameters/QueryMimeType"
        - $ref: "#/components/parameters/QueryActive"
        - $ref: "#/components/parameters/QueryPublic"
      responses:
        "201":
          description: Returns and array of objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DB-Object"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"

  /object/{objId}:
    head:
      summary: Returns object headers
      description: Returns S3 and COMS headers for a specific object
      operationId: headObject
      tags:
        - Object
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
        - $ref: "#/components/parameters/QueryVersionId"
      responses:
        "204":
          description: Returns object headers
          headers:
            Content-Disposition:
              $ref: "#/components/headers/Content-Disposition"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            ETag:
              $ref: "#/components/headers/ETag"
            Last-Modified:
              $ref: "#/components/headers/Last-Modified"
            x-amz-server-side-encryption:
              $ref: "#/components/headers/x-amz-server-side-encryption"
            x-amz-version-id:
              $ref: "#/components/headers/x-amz-version-id"
            x-amz-meta-id:
              $ref: "#/components/headers/x-amz-meta-id"
            x-amz-meta-name:
              $ref: "#/components/headers/x-amz-meta-name"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"

    get:
      summary: Returns the object
      description: >-
        Returns the object as either a direct binary stream or HTTP 302
        redirect to a direct, temporary pre-signed S3 object URL location.
      operationId: readObject
      tags:
        - Object
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
        - $ref: "#/components/parameters/QueryDownload"
        - $ref: "#/components/parameters/QueryExpiresIn"
        - $ref: "#/components/parameters/QueryVersionId"
      responses:
        "200":
          description: Returns the object
          headers:
            Content-Disposition:
              $ref: "#/components/headers/Content-Disposition"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            ETag:
              $ref: "#/components/headers/ETag"
            Last-Modified:
              $ref: "#/components/headers/Last-Modified"
            x-amz-server-side-encryption:
              $ref: "#/components/headers/x-amz-server-side-encryption"
            x-amz-version-id:
              $ref: "#/components/headers/x-amz-version-id"
            x-amz-meta-id:
              $ref: "#/components/headers/x-amz-meta-id"
            x-amz-meta-name:
              $ref: "#/components/headers/x-amz-meta-name"
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "302":
          $ref: "#/components/responses/S3Found"
        "304":
          $ref: "#/components/responses/NotModified"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"

    post:
      summary: Updates an Object
      description: >-
        Updates the object in the configured object storage.
      operationId: updateObject
      tags:
        - Object
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
      requestBody:
        description: Form-data containing files
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: foobar
              properties:
                anyKey:
                  type: string
                  description: >-
                    This endpoint will accept only one arbitrary form-data key.
                    That key shall contain a binary representation of the file
                    to upload. In the response, the successfully uploaded file
                    shall contain a 'fieldName' property corresponding to
                    your custom defined key.
                  format: binary
      responses:
        "200":
          description: Returns the updated object data
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - fieldName
                    properties:
                      fieldName:
                        type: string
                        description: >-
                          A unique form field chosen for the key for each file
                          in the multi-part form-data post
                        example: "file1"
                  - $ref: "#/components/schemas/DB-Object"
                  - $ref: "#/components/schemas/S3-Object"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"

    delete:
      summary: Deletes the object
      description: >-
        Completely deletes the object from S3 and clears all database
        references to it. This is not a reversible operation.
      operationId: deleteObject
      tags:
        - Object
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
      responses:
        "200":
          description: >-
            Object was deleted from object storage and COMS database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response-ObjectDeleted"

        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        # "409":
        #   $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/Error"

  /object/{objId}/versions:
    get:
      summary: Returns the object version history
      description: Returns an array of an object's version history
      operationId: listObjectVersion
      tags:
        - Object
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
      responses:
        "200":
          description: Returns an array of versions for a specific object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3-VersionList"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"

  /object/{objId}/public:
    patch:
      summary: Sets the public flag of an object
      description: >-
        Toggles the public property for an object. Sets public to false if
        public query parameter is not specified.
      operationId: togglePublic
      tags:
        - Object
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
        - $ref: "#/components/parameters/QueryPublic"
      responses:
        "200":
          description: Returns the object information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DB-Object"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"

  /permission:
    get:
      summary: Search for object permissions
      description: >-
        Returns an array of permissions meeting the filtering parameters provided
      operationId: searchPermissions
      security:
        - BasicAuth: []
      tags:
        - Permission
      parameters:
        - $ref: "#/components/parameters/QueryObjectId"
        - $ref: "#/components/parameters/QueryUserId"
        - $ref: "#/components/parameters/QueryPermCode"
      responses:
        "200":
          description: >-
            Returns a JSON object representation of each permission as defined in
            the database that match the provided parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DB-ObjectPermission"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "501":
          $ref: "#/components/responses/NotImplemented"
        default:
          $ref: "#/components/responses/Error"

  /permission/{objId}:
    get:
      summary: Returns the object permissions
      operationId: listPermissions
      tags:
        - Permission
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
        - $ref: "#/components/parameters/QueryUserId"
        - $ref: "#/components/parameters/QueryPermCode"
      responses:
        "200":
          description: Returns a JSON object representation of each permission as defined in the database that match the provided obJect ID and query parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DB-ObjectPermission"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Error"
    put:
      summary: Grants object permissions to users
      operationId: addPermissions
      tags:
        - Permission
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
      requestBody:
        description: An array of objects, each containing a user ID and the permission being added
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Request-PermissionTuple"
      responses:
        "201":
          description: Returns the object information
          # content:
          #   application/json:
          #     schema:
          #       $ref: "#/components/schemas/ObjectDetails"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          description: The server was unable to process the contained instructions. Generally validation error(s).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response-Problem"
        default:
          $ref: "#/components/responses/Error"

    delete:
      summary: Deletes permissions for a user
      operationId: removePermissions
      tags:
        - Permission
      parameters:
        - $ref: "#/components/parameters/PathObjectId"
        - $ref: "#/components/parameters/QueryUserId"
        - $ref: "#/components/parameters/QueryPermCode"
      responses:
        "200":
          description: Returns array of deleted rows.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DB-ObjectPermission"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          description: The server was unable to process the contained instructions. Generally validation error(s).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response-Problem"
        default:
          $ref: "#/components/responses/Error"

  /user:
    get:
      summary: Search for user(s)
      operationId: searchUsers
      tags:
        - User
      parameters:
        # not sure how to override this ref to not required
        - $ref: "#/components/parameters/QueryUserId"
        - $ref: "#/components/parameters/QueryIdentityId"
        - in: query
          name: idp
          description: Search by specific idp (idir/bceid/etc)
          schema:
            type: string
            example: idir
        - in: query
          name: username
          description: Search by specific username
          schema:
            type: string
            example: bobsmith
        - in: query
          name: email
          description: Search by specific email
          schema:
            type: string
            example: bobsmith@gov.bc.ca
        - in: query
          name: firstName
          description: Search by specific first name
          schema:
            type: string
            example: bob
        - in: query
          name: fullName
          description: Search by specific full name
          schema:
            type: string
            example: bob smith
        - in: query
          name: lastName
          description: Search by specific last name
          schema:
            type: string
            example: smith
        - in: query
          name: active
          description: Whether to look for active or inactive users
          schema:
            type: boolean
            example: true
        - in: query
          name: search
          description: Filter search option
          schema:
            type: string
            example: smith
      responses:
        "200":
          description: Returns a JSON object representation of the user matching provided parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DB-User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: The server was unable to process the contained instructions. Generally validation error(s).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response-Problem"
        default:
          $ref: "#/components/responses/Error"

  /user/idpList:
    get:
      summary: Lists all known identity providers
      operationId: listIdps
      tags:
        - User
      responses:
        "200":
          description: Returns a JSON array of known identity providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DB-IdentityProvider"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/Error"

components:
  headers:
    Content-Disposition:
      description: Specifies presentational information for the object
      schema:
        type: string
      example: 'attachment; filename="foobar.txt"'
    Content-Length:
      description: Size of the body in bytes
      schema:
        type: integer
      example: 529
    Content-Type:
      description: A standard MIME type describing the format of the object data
      schema:
        type: string
      example: text/plain; charset=utf-8
    ETag:
      description: >-
        An entity tag (ETag) is an opaque identifier assigned by a web server
        to a specific version of a resource found at a URL
      schema:
        type: integer
      example: '"9d1aaa54b84e1d6ccc6e0477c5717fe3"'
    Last-Modified:
      description: Creation date of the object
      schema:
        type: string
        format: date-time
      example: Fri March 11 2022 15:42:05 GMT-0700 (Pacific Daylight Time)
    Location:
      description: URL Location of the moved resource
      schema:
        type: string
      example: https://your.objectstore.com/yourbucket/coms/env/00000000-0000-0000-0000-000000000000?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=credential%2F20220411%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220411T204528Z&X-Amz-Expires=300&X-Amz-Signature=SIGNATURE&X-Amz-SignedHeaders=host&x-id=GetObject
    x-amz-server-side-encryption:
      description: >-
        If the object is stored using server-side encryption either with an AWS KMS key or an Amazon S3-managed encryption key, the response includes this header with the value of the server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).
      schema:
        type: string
      example: AES256
    x-amz-version-id:
      description: Version of the object
      schema:
        type: string
      example: 1649457725874
    x-amz-meta-id:
      description: The Object ID
      schema:
        type: string
      example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    x-amz-meta-name:
      description: The original filename of the object
      schema:
        type: string
      example: foobar.txt

  parameters:
    PathObjectId:
      in: path
      name: objId
      description: Uuid of an object
      required: true
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryActive:
      in: query
      name: active
      description: Boolean on active status
      schema:
        type: boolean
        example: true
    QueryDownload:
      in: query
      name: download
      description: Request to directly download the object as a binary stream
      schema:
        type: boolean
        default: false
        example: true
    QueryExpiresIn:
      in: query
      name: expiresIn
      description: How many seconds the pre-signed URL should remain valid for
      schema:
        type: integer
        format: int32
        default: 300
        example: 300
    QueryIdentityId:
      in: query
      name: identityId
      description: Identity IDs of the keycloak user
      required: true
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryMessageId:
      in: query
      name: msgId
      description: Uuid of a message
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryMimeType:
      in: query
      name: mimeType
      description: The object MIME Type
      schema:
        type: string
        example: application/octet-stream
    QueryObjectId:
      in: query
      name: objId
      description: Uuid or array of uuids representing the object
      schema:
        oneOf:
          - type: string
            format: uuid
            example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
          - type: array
            items:
              type: string
              format: uuid
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    QueryOriginalName:
      in: query
      name: originalName
      description: The original filename of the object
      schema:
        type: string
        example: foobar.txt
    QueryPath:
      in: query
      name: path
      description: The canonical S3 path string of the object
      schema:
        type: string
        example: coms/env/ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    QueryPermCode:
      in: query
      name: permCode
      description: the permission type
      required: false
      schema:
        $ref: "#/components/schemas/PermCode"
    QueryPublic:
      in: query
      name: public
      description: Boolean on public status
      schema:
        type: boolean
        example: true
    QueryUserId:
      in: query
      name: userId
      description: User ID of the keycloak user
      required: true
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryVersionId:
      in: query
      name: versionId
      description: request a specified version
      schema:
        type: integer
        format: int32
        description: a version identifier created in S3
        example: 1647462569641

  schemas:
    DB-IdentityProvider:
      allOf:
      - type: object
        required:
          - idp
          - active
        properties:
          idp:
            type: string
            description: The identity provider string
            example: idir
          active:
            type: boolean
            description: Determines whether this identity provider is considered active
            default: true
            example: true
      - $ref: "#/components/schemas/DB-TimestampUserData"
    DB-Object:
      allOf:
        - type: object
          required:
            - id
            - mimeType
            - originalName
            - path
            - public
            - active
          properties:
            id:
              type: string
              description: The primary identifier for this object
              format: uuid
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            mimeType:
              type: string
              description: the MIME Type of the object
              example: application/octet-stream
            originalName:
              type: string
              description: The original filename of the object
              example: foobar.txt
            path:
              type: string
              description: The canonical S3 path string of the object
              example: coms/env/ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            public:
              type: boolean
              description: Determines whether this object is publicly accessible
              default: false
              example: false
            active:
              type: boolean
              description: Determines whether this object is considered active
              default: true
              example: true
        - $ref: "#/components/schemas/DB-TimestampUserData"
    DB-ObjectPermission:
      allOf:
        - type: object
          required:
            - id
            - objectId
            - userId
            - permCode
          properties:
            id:
              type: string
              format: uuid
              description: The unique identifier for this permission tuple
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            objectId:
              type: string
              format: uuid
              description: The unique identifier for the object
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            userId:
              type: string
              format: uuid
              description: The unique identifier of the user
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            permCode:
              $ref: "#/components/schemas/PermCode"
        - $ref: "#/components/schemas/DB-TimestampUserData"
    DB-TimestampUserData:
      type: object
      required:
        - createdBy
        - createdAt
        - updatedBy
        - updatedAt
      properties:
        createdBy:
          type: string
          format: uuid
          description: >-
            The subject id of the current user if request was authenticated with a Bearer token (ex. JWT), or a 'nil' uuid if request was authenticated via Basic auth
          example: 72cf13d7-aef7-4ad5-8ddd-0ff23eefb442
        createdAt:
          type: string
          format: date-time
          description: Time when this record was created
          example: "2022-03-11T23:19:16.343Z"
        updatedBy:
          type: string
          format: uuid
          description: >-
            The subject id of the current user if request was authenticated
            with a Bearer token (ex. JWT), or a 'nil' uuid if request was
            authenticated via Basic auth
          default: null
          example: 72cf13d7-aef7-4ad5-8ddd-0ff23eefb442
        updatedAt:
          type: string
          format: date-time
          description: Time when this record was last updated
          example: "2022-03-11T23:19:16.343Z"
    DB-User:
      type: object
      properties:
        userId:
          type: string
          description: Subject id of the user (Usually the sub claim in a JWT)
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        identityId:
          type: string
          description: >-
            Identity id of the user (Usually the sub claim in a JWT but can be
            redefined to a different claim with the `KC_IDENTITYKEY` env variable)
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        idp:
          type: string
          description: Identity provider used in OIDC server
          example: idir
        username:
          type: string
          description: Username of this user
          example: jsmith
        firstName:
          type: string
          example: Jane
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: jsmith@gov.bc.ca
        active:
          type: boolean
          description: Determines whether this user is considered active
          default: true
          example: true
    PermCode:
      type: string
      description: Permission code/type for an object
      enum:
        - CREATE
        - READ
        - UPDATE
        - DELETE
        - MANAGE
      example: UPDATE
    Request-PermissionTuple:
      type: object
      required:
        - permCode
        - userId
      properties:
        permCode:
          $ref: "#/components/schemas/PermCode"
        oidcId:
          type: string
          description: The primary identifier for a user
          format: uuid
          example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    Response-BadRequest:
      allOf:
        - $ref: "#/components/schemas/Response-Problem"
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: "https://httpstatuses.com/400"
    Response-Conflict:
      allOf:
        - $ref: "#/components/schemas/Response-Problem"
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: "https://httpstatuses.com/409"
    Response-Error:
      allOf:
        - $ref: "#/components/schemas/Response-Problem"
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: "https://httpstatuses.com/500"
    Response-Forbidden:
      allOf:
        - $ref: "#/components/schemas/Response-Problem"
        - type: object
          properties:
            type:
              example: "https://httpstatuses.com/403"
            title:
              example: Forbidden
            status:
              example: 403
            detail:
              example: "User lacks permission to complete this action"
    Response-NotFound:
      allOf:
        - $ref: "#/components/schemas/Response-Problem"
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: "https://httpstatuses.com/404"
    Response-NotImplemented:
      allOf:
        - $ref: "#/components/schemas/Response-Problem"
        - type: object
          properties:
            status:
              example: 501
            title:
              example: This action is not supported in the current authentication mode
            type:
              example: "https://httpstatuses.com/501"
    Response-ObjectDeleted:
      type: object
      properties:
        $metadata:
          $ref: "#/components/schemas/S3-Metadata"
        DeleteMarker:
          type: boolean
        VersionId:
          type: integer
          format: int32
          description: a version identifier created in S3
          example: 1647462569641
    Response-Problem:
      required:
        - type
        - title
        - status
      properties:
        type:
          type: string
          description: "What type of problem, link to explanation of problem"
        title:
          type: string
          description: "Title of problem, generally the Http Status Code description"
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: Short description of why this problem was raised.
        errors:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              value:
                type: object
                description: Contents of the field that was in error.
              message:
                type: string
                description: The error message for the field.
    Response-Unauthorized:
      allOf:
        - type: object
          properties:
            type:
              example: "https://httpstatuses.com/401"
            title:
              example: Unauthorized
            status:
              example: 401
            detail:
              example: "Invalid authorization credentials"
    Response-ValidationError:
      allOf:
        - $ref: "#/components/schemas/Response-Problem"
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: "https://httpstatuses.com/422"
    S3-Metadata:
      type: object
      required:
        - httpStatusCode
        - extendedRequestId
      properties:
        httpStatusCode:
          type: integer
          description: S3 Endpoint internal HTTP code
          example: 200
        extendedRequestId:
          type: string
          description: S3 Endpoint unique internal request id
          example: a0ec1be0a99a08aee6026ba9756da40327f2d3ce844499b7ee752082f3fb22e3
        attempts:
          type: integer
          description: Number of attempts performed by S3
          example: 1
        totalRetryDelay:
          type: integer
          description: S3 delay for retries
          example: 0
    S3-Object:
      type: object
      required:
        - $metadata
        - ETag
        - VersionId
      properties:
        $metadata:
          $ref: "#/components/schemas/S3-Metadata"
        ETag:
          type: string
          description: S3 Identifier for a specific version of this object
          example: '"9d1aaa54b84e1d6ccc6e0477c5717fe3"'
        ServerSideEncryption:
          type: string
          description: >-
            If the object is stored using server-side encryption either with an
            AWS KMS key or an Amazon S3-managed encryption key, this field
            specifies the server-side encryption algorithm used when storing this
            object in Amazon S3 (for example, AES256, aws:kms).
          example: AES256
        VersionId:
          type: integer
          format: int32
          description: a version identifier created in S3
          example: 1647462569641
    S3-Version:
      type: object
      required:
        - ETag
        - Size
        - StorageClass
        - VersionId
        - IsLatest
        - LastModified
      properties:
        ETag:
          type: string
          description: S3 Identifier for a specific version of this object
          example: "9d1aaa54b84e1d6ccc6e0477c5717fe3"
        Size:
          type: integer
          description: Size of the object in bytes
          example: 529
        StorageClass:
          description: >-
            S3 storage classes based on the data access, resiliency, and cost
            requirements of your workloads
          example: STANDARD
        key:
          description: Key of the object
        VersionId:
          type: integer
          format: int32
          description: a version identifier created in S3
          example: 1647462569641
        IsLatest:
          description: >-
            Specifies whether the object is (true) or is not (false) the latest
            version of an object.
        LastModified:
          type: string
          format: date-time
          example: "2022-03-11T23:19:16.343Z"
        Owner:
          $ref: "#/components/schemas/S3-VersionOwner"
    S3-VersionList:
      type: object
      required:
        - $metadata
        - IsTruncated
        - MaxKeys
        - Name
        - Prefix
        - Versions
      properties:
        $metadata:
          $ref: "#/components/schemas/S3-Metadata"
        IsTruncated:
          type: boolean
          description: Whether or not this object listing is complete
          example: false
        KeyMarker:
          type: string
          description: Marks the last key returned in a truncated response
          example: ""
        MaxKeys:
          type: integer
          format: int32
          description: >-
            Sets the maximum number of keys returned in the response. By
            default the action returns up to 1,000 key names. The response
            might contain fewer keys but will never contain more.
          example: 1000
        Name:
          type: string
          description: Name of the S3 bucket
        Prefix:
          type: string
          description: Keys that begin with the indicated prefix
          example: coms/env/ac246e31-c807-496c-bc93-cd8bc2f1b2b4
        VersionIdMarker:
          type: string
          description: >-
            Marks the last version of the key returned in a truncated response
          example: ""
        Versions:
          type: array
          items:
            $ref: "#/components/schemas/S3-Version"
    S3-VersionOwner:
      type: object
      required:
        - DisplayName
        - ID
      properties:
        DisplayName:
          type: string
          description: The bucket accessKeyId/owner
          example: abcdef
        ID:
          type: string
          description: The bucket accessKeyId/owner
          example: abcdef

  responses:
    Accepted:
      description: Accepted
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-BadRequest"
    Conflict:
      description: Request conflicts with server state
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-Conflict"
    Error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-Error"
    Found:
      description: Resource requested has been temporarily moved
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-Forbidden"
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-NotFound"
    NotImplemented:
      description: The server does not support the functionality required to fulfill the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-NotImplemented"
    NotModified:
      description: Not Modified
    S3Found:
      description: Returns a temporary pre-signed S3 object URL location header
      headers:
        Location:
          $ref: "#/components/headers/Location"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-Unauthorized"
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response-ValidationError"

  securitySchemes:
    BasicAuth:
      type: http
      description: Basic auth via environment defined username and password
      scheme: basic
    BearerAuth:
      type: http
      description: Bearer token auth using an OIDC issued JWT token
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      description: OpenID Connect endpoint for acquiring JWT tokens
      openIdConnectUrl: >-
        https://oidc.gov.bc.ca/auth/realms/your-realm-name/.well-known/openid-configuration
