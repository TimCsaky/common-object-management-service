---
openapi: 3.0.3
info:
  version: 1.0.0
  title: Vue Skeleton API
  description: A minimally viable API
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Author
    email: author@example.com
servers:
  - url: /api/v1
    description: This Server
security:
  - BearerAuth: []
    OpenID: []
paths:
  '/object':
    get:
      summary: List all user accessible objects
      description: >-
        This endpoint returns a list of all user accessible objects.
      operationId: GetAccessibleObjects
      tags:
        - Object
      responses:
        '200':
          description: Returns the object information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      summary: Create an Object
      description: >-
        This endpoint will create an object.
      operationId: PostCreateObject
      tags:
        - Object
      responses:
        '201':
          description: Returns an array of the created object id
          content:
            application/json:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/object/{objId}':
    get:
      summary: Details of a single Object
      description: >-
        This endpoint returns all of the information related to
        objId.
      operationId: GetObject
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
      responses:
        '200':
          description: Returns the object information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      summary: Updates an Object
      description: >-
        This endpoint will update an object.
      operationId: PostUpdateObject
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
      responses:
        '201':
          description: Returns udpate Object response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      summary: Deletes the object
      description: >-
        This endpoint will delete the Object specific to the objId
      operationId: DeleteObject
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
      responses:
        '202':
          description: Request is acknowledged but not necessarily completed
          headers:
            Content-Location:
              example: /api/v1/status/00000000-0000-0000-0000-000000000000
              schema:
                type: string
                format: uri
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
  '/object/{objId}/versions':
    get:
      summary: Returns the object version history
      description: >-
        This endpoint returns an array of the information related to
        the object's version history.
      operationId: GetListObjectVersion
      tags:
        - Versions
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
      responses:
        '200':
          description: Returns an array of versions for a specific object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/object/{objId}/public':
    get:
      summary: Sets an object public property
      description: >-
        This endpoint sets the public property for an Object
      operationId: PatchObjectPublic
      tags:
        - Permissions
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
      responses:
        '200':
          description: Returns the object information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/object/{objId}/permissions':
    get:
      summary: Returns the object permissions
      description: >-
        This endpoint returns an array of the Object's permissions
      operationId: GetObjectPermissions
      tags:
        - Permissions
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
      responses:
        '200':
          description: Returns the object information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/object/{objId}/permissions/{userId}':
    post:
      summary: Grants object permissions to a specific user
      description: >-
        This endpoint will update the permissions of a specific user
      operationId: PostUpdateUserPermissions
      tags:
        - Permissions
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
        - $ref: '#/components/parameters/PathUserId'
      responses:
        '200':
          description: Returns the object information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
    delete:
      summary: Deletes object permissions for a specific user
      description: >-
        This endpoint will delete the permission of an Object with a specific to the objId
      operationId: DeleteObjectPermissions
      tags:
        - Permissions
      parameters:
        - $ref: '#/components/parameters/PathObjectId'
        - $ref: '#/components/parameters/PathUserId'
      responses:
        '204':
          description: Returns udpate Object response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
components:
  parameters:
      PathObjectId:
        in: path
        name: objId
        description: Uuid of the message
        required: true
        schema:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
      PathUserId:
        in: path
        name: userId
        description: Uuid of the message
        required: true
        schema:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: 'https://example.com/.well-known/openid-configuration'
  schemas:
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: 'https://httpstatuses.com/400'
    Conflict:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: 'https://httpstatuses.com/409'
    Error:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: 'https://httpstatuses.com/500'
    MergeResponse:
      type: array
      items:
        $ref: '#/components/schemas/TransactionResponse'
    NotFound:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: 'https://httpstatuses.com/404'
    ObjectDetails:
      type: object
      properties:
        objId:
          type: string
          description: This Object instance uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    Problem:
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          description: 'What type of problem, link to explanation of problem'
        title:
          type: string
          description: 'Title of problem, generally the Http Status Code description'
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: Short description of why this problem was raised.
    TransactionResponse:
      type: object
      required:
        - txId
      properties:
        txId:
          type: string
          description: A corresponding transaction uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: 'https://httpstatuses.com/422'
  responses:
    Accepted:
      description: Accepted
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    Conflict:
      description: Request conflicts with server state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Conflict'
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Lack required role to perform action
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    UnauthorizedError:
      description: Access token is missing or invalid
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
