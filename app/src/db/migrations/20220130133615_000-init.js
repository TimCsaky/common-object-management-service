const stamps = require('../stamps');
const { NIL } = require('uuid');

const SYSTEM_USER = NIL;

exports.up = function (knex) {
  return Promise.resolve()

    // Base COMS tables
    .then(() => knex.schema.createTable('identity_provider', table => {
      table.string('code').primary();
      table.boolean('active').notNullable().defaultTo(true);
      stamps(knex, table);
    }))

    .then(() => knex.schema.createTable('user', table => {
      table.string('oidcId').primary();
      table.string('firstName');
      table.string('fullName');
      table.string('lastName');
      table.string('username').notNullable().index();
      table.string('email').index();
      table.string('idp').references('code').inTable('identity_provider');
      table.boolean('active').notNullable().defaultTo(true);
      stamps(knex, table);
    }))

    .then(() => knex.schema.createTable('permission', table => {
      table.string('code').primary();
      table.string('display').notNullable();
      table.boolean('active').notNullable().defaultTo(true);
      stamps(knex, table);
    }))

    .then(() => knex.schema.createTable('object', table => {
      table.uuid('id').primary();
      table.string('originalName', 255).notNullable();
      table.string('path', 1024).notNullable();
      table.string('mimeType').notNullable();
      table.boolean('public').notNullable().defaultTo(false);
      table.boolean('active').notNullable().defaultTo(true);
      stamps(knex, table);
    }))

    .then(() => knex.schema.createTable('object_permission', table => {
      table.uuid('id').primary();
      table.string('oidcId').references('oidcId').inTable('user').notNullable();
      table.uuid('objectId').references('id').inTable('object').notNullable();
      table.string('code').references('code').inTable('permission').notNullable();
      stamps(knex, table);
    }))

    // Audit tables for object and object_permission
    .then(() => knex.schema.createTable('audit_object', table => {
      table.specificType(
        'id',
        'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY'
      );
      table.uuid('objectId').notNullable().index();
      table.string('dbUser').notNullable();
      table.string('updatedByUsername');
      table.timestamp('actionTimestamp', { useTz: true }).defaultTo(knex.fn.now());
      table.string('action').notNullable();
      table.jsonb('originalData');
    }))

    .then(() => knex.schema.createTable('audit_object_permission', table => {
      table.specificType(
        'id',
        'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY'
      );
      table.uuid('objectPermissionId').notNullable().index();
      table.string('dbUser').notNullable();
      table.string('updatedByUsername');
      table.timestamp('actionTimestamp', { useTz: true }).defaultTo(knex.fn.now());
      table.string('action').notNullable();
      table.jsonb('originalData');
    }))

    .then(() => knex.schema.raw(`CREATE OR REPLACE FUNCTION public.audit_object_func() RETURNS trigger AS $body$
    DECLARE
        v_old_data json;
    BEGIN
        if (TG_OP = 'UPDATE') then
            v_old_data := row_to_json(OLD);
            insert into public.audit_object ("objectId", "dbUser", "updatedByUsername", "actionTimestamp", "action", "originalData")
            values (
            OLD.id,
            SESSION_USER,
            NEW."updatedBy",
            now(),
            'UPDATE',
            v_old_data);
            RETURN NEW;
        elsif (TG_OP = 'DELETE') then
            v_old_data := row_to_json(OLD);
            insert into public.audit_object ("objectId", "dbUser", "actionTimestamp", "action", "originalData")
            values (
            OLD.id,
            SESSION_USER,
            now(),
            'DELETE',
            v_old_data);
            RETURN NEW;
        end if;
    END;
    $body$ LANGUAGE plpgsql`))

    .then(() => knex.schema.raw(`CREATE OR REPLACE FUNCTION public.audit_object_permission_func() RETURNS trigger AS $body$
    DECLARE
        v_old_data json;
    BEGIN
        if (TG_OP = 'UPDATE') then
            v_old_data := row_to_json(OLD);
            insert into public.audit_object_permission ("objectPermissionId", "dbUser", "updatedByUsername", "actionTimestamp", "action", "originalData")
            values (
            OLD.id,
            SESSION_USER,
            NEW."updatedBy",
            now(),
            'UPDATE',
            v_old_data);
            RETURN NEW;
        elsif (TG_OP = 'DELETE') then
            v_old_data := row_to_json(OLD);
            insert into public.audit_object_permission ("objectPermissionId", "dbUser", "actionTimestamp", "action", "originalData")
            values (
            OLD.id,
            SESSION_USER,
            now(),
            'DELETE',
            v_old_data);
            RETURN NEW;
        end if;
    END;
    $body$ LANGUAGE plpgsql`))

    .then(() => knex.schema.raw(`CREATE TRIGGER audit_object_trigger
    AFTER UPDATE OR DELETE ON object
    FOR EACH ROW EXECUTE PROCEDURE public.audit_object_func();`))

    .then(() => knex.schema.raw(`CREATE TRIGGER audit_object_permission_trigger
    AFTER UPDATE OR DELETE ON object_permission
    FOR EACH ROW EXECUTE PROCEDURE public.audit_object_permission_func();`))

    // Populate Data
    .then(() => {
      const users = ['System'];
      const items = users.map((user) => ({
        oidcId: SYSTEM_USER,
        username: user,
        active: false,
        createdBy: SYSTEM_USER,
      }));
      return knex('user').insert(items);
    })

    .then(() => {
      const perms = ['Create', 'Read', 'Update', 'Delete', 'Manage' ];
      const items = perms.map((perm) => ({
        createdBy: SYSTEM_USER,
        code: perm.toUpperCase(),
        display: perm,
        active: true
      }));
      return knex('permission').insert(items);
    });
};

exports.down = function (knex) {
  return Promise.resolve()
    .then(() => knex.schema.raw('DROP TRIGGER audit_object_permission_trigger ON object_permission'))
    .then(() => knex.schema.raw('DROP TRIGGER audit_object_trigger ON object'))
    .then(() => knex.schema.raw('DROP FUNCTION audit_object_permission_func()'))
    .then(() => knex.schema.raw('DROP FUNCTION audit_object_func()'))
    .then(() => knex.schema.dropTableIfExists('audit_object_permission'))
    .then(() => knex.schema.dropTableIfExists('audit_object'))
    .then(() => knex.schema.dropTableIfExists('object_permission'))
    .then(() => knex.schema.dropTableIfExists('object'))
    .then(() => knex.schema.dropTableIfExists('permission'))
    .then(() => knex.schema.dropTableIfExists('user'))
    .then(() => knex.schema.dropTableIfExists('identity_provider'));
};
